Quando usa injecao de dependecia utilizando Interfaces e Services, 
primeiro colocar a interface no construtor do service
depois precisa fazer o bind, que esta na pasta provider/appserviceproviders
na funcao register 

public function register()
    {
       $this->app->bind(UserRepositoryInterface::class,UserRepository::class);
    }


observe :
	para gerar o id, quando for salvar ele vai inserir um id gerado automaticamente

php artisan make:observer UserObserver --model=User

apos implementar o metodo, precisa adicionar ele no Provider - EventServiceProvider no metodo boot
User::observe(UserObserver::class);

**lembrando quando pricesar carregar um arquivo para toda aplicacao, deve ir em composer.json e em "autoload"

depois dar o comando: composer dump-autoload

images upload
comando para poder utilizar a imagem na pasta app->public 
php artisan storage:link

deixar FILESYSTEM_DISK=local como public em .env



QUANDO FOR FAZER UM NOVO CRUD
- Observers
- MODEL 
- PROVIDER APP
- REGISTRAR O OBSERVER NO PROVIDER EventServiceProvider



para debugar: 
composer require barryvdh/laravel-debugbar --dev
php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"

para entrar no bash do docker para dar comando php: docker-compose exec app bash

------------
trabalhar com autenticacao 
documentacao : https://laravel.com/docs/9.x/starter-kits

primeiro comando: 

composer require laravel/breeze --dev
php artisan breeze:install
rodar npm install e npm run dev obs. qdo for subir na producao, rodar npm run build



PARA CRIAR EVENTOS: php artisan make:event 

COMANDO PARA CRIAR LISTENET E ASSOCIAR ELE A UM EVENTO: php artisan make:listener SendEmailSupportReplied --event=SupportReplied
DEPOIS É NECESSARIO INFORMAR O EVENTO  E A AÇÕES EM PROVIDER/EVENTSERIVCE NO METODO LISTEN()

COMANDO PARA CRIAR EMAIL E A VIEW PERSONALIZACAO : php artisan make:mail SendMailSupportReplied --markdown=mails.supports.support-replied

site mailtrap - usa para enviar email, verificar , curso laravel 9 ead - ultimo modulo aula 8

//SYNC roda de forma que espera mandar o email para poder mexer, já o redis coloca na fila e ja libera o usuario mesmo sem 